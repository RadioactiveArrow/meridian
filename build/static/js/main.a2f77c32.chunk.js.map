{"version":3,"sources":["assets/meridian.svg","components/LineGraph.js","pages/View.js","pages/App.js","index.js"],"names":["LineGraph","data","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","View","scene","camera","renderer","controls","geometry","earthMaterial","earth","heatmapMaterial","heatmap","light","glowMaterial","outerGlow","useState","Date","date","setDate","rotate","setRotate","DateButton","value","onClick","className","stats","setStats","canvasRef","useRef","loadManager","LoadingManager","loader","TextureLoader","controlsRef","heatmapRef","animate","requestAnimationFrame","update","material","uniforms","viewVector","Vector3","subVectors","position","render","handleResize","canvas","current","width","window","innerWidth","height","innerHeight","aspect","updateProjectionMatrix","setSize","useEffect","Scene","background","Color","PerspectiveCamera","z","y","WebGLRenderer","antialias","document","body","appendChild","domElement","OrbitControls","dampingFactor","enablePan","enableDamping","enableKeys","minDistance","maxDistance","SphereGeometry","MeshStandardMaterial","bumpMap","load","bumpScale","map","Mesh","x","add","clone","transparent","PointLight","set","ShaderMaterial","c","p","glowColor","vertexShader","fragmentShader","side","BackSide","blending","AdditiveBlending","scale","multiplyScalar","autoRotate","axios","get","getFullYear","getMonth","getDate","then","res","addEventListener","mapURI","console","log","ref","htmlFor","name","id","checked","onChange","src","meridianLogo","alt","selected","minDate","maxDate","customInput","avg","std","fontSize","App","path","component","to","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a2f77c32.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/meridian.2ad4cede.svg\";","import { ResponsiveLine } from 'nivo'\r\n// make sure parent container have a defined height when using\r\n// responsive component, otherwise height will be 0 and\r\n// no chart will be rendered.\r\n// website examples showcase many properties,\r\n// you'll often use just a few of them.\r\nconst LineGraph = ({ data /* see data tab */ }) => (\r\n    <ResponsiveLine\r\n        data={data}\r\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n        xScale={{ type: 'point' }}\r\n        yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\r\n        yFormat=\" >-.2f\"\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{   \r\n            orient: 'bottom',\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'transportation',\r\n            legendOffset: 36,\r\n            legendPosition: 'middle'\r\n        }}\r\n        axisLeft={{\r\n            orient: 'left',\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'count',\r\n            legendOffset: -40,\r\n            legendPosition: 'middle'\r\n        }}\r\n        pointSize={10}\r\n        pointColor={{ theme: 'background' }}\r\n        pointBorderWidth={2}\r\n        pointBorderColor={{ from: 'serieColor' }}\r\n        pointLabelYOffset={-12}\r\n        useMesh={true}\r\n        legends={[\r\n            {\r\n                anchor: 'bottom-right',\r\n                direction: 'column',\r\n                justify: false,\r\n                translateX: 100,\r\n                translateY: 0,\r\n                itemsSpacing: 0,\r\n                itemDirection: 'left-to-right',\r\n                itemWidth: 80,\r\n                itemHeight: 20,\r\n                itemOpacity: 0.75,\r\n                symbolSize: 12,\r\n                symbolShape: 'circle',\r\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                effects: [\r\n                    {\r\n                        on: 'hover',\r\n                        style: {\r\n                            itemBackground: 'rgba(0, 0, 0, .03)',\r\n                            itemOpacity: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]}\r\n    />\r\n)\r\n\r\nexport default LineGraph;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Scene,\r\n  Color,\r\n  PerspectiveCamera,\r\n  LoadingManager,\r\n  TextureLoader,\r\n  WebGLRenderer,\r\n  SphereGeometry,\r\n  MeshStandardMaterial,\r\n  PointLight,\r\n  ShaderMaterial,\r\n  Mesh,\r\n  Vector3,\r\n  BackSide,\r\n  AdditiveBlending,\r\n} from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport axios from \"axios\";\r\nimport \"../styles/viewer.css\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport meridianLogo from \"../assets/meridian.svg\";\r\n\r\nimport 'react-vis/dist/style.css';\r\nimport { XYPlot, LineSeries, XAxis, YAxis, FlexibleWidthXYPlot, VerticalGridLines, HorizontalGridLines } from 'react-vis';\r\nimport LineGraph from \"../components/LineGraph\";\r\n\r\nexport const View = () => {\r\n  // const [day, setDay] = useState(1);\r\n  // const [month, setMonth] = useState(1);\r\n  // const [year, setYear] = useState(2020);\r\n  const [date, setDate] = useState(new Date(2020, 0, 1));\r\n  const [rotate, setRotate] = useState(true);\r\n\r\n  const DateButton = ({ value, onClick }) => (\r\n    <button className=\"cal-button\" onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n\r\n  const [stats, setStats] = useState({});\r\n\r\n  const canvasRef = useRef(null);\r\n\r\n  const vsScript = //Rendering script for outer glow vertex shader\r\n    \"uniform vec3 viewVector;\" +\r\n    \"uniform float c;\" +\r\n    \"uniform float p;\" +\r\n    \"varying float intensity; \" +\r\n    \"void main() {\" +\r\n    \"vec3 vNormal = normalize(normalMatrix * normal); vec3 vNormel = normalize(normalMatrix * viewVector); intensity = pow(c - dot(vNormal,vNormel), p);\" +\r\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\" +\r\n    \"}\";\r\n\r\n  const fsScript = //Rendering script for outer glow fragment shader\r\n    \"uniform vec3 glowColor;\" +\r\n    \"varying float intensity;\" +\r\n    \"void main() {\" +\r\n    \"vec3 glow = glowColor * intensity; gl_FragColor = vec4(glow, 1.0);\" +\r\n    \"}\";\r\n\r\n  const loadManager = new LoadingManager();\r\n  const loader = new TextureLoader(loadManager);\r\n\r\n  let scene;\r\n  let camera;\r\n  let renderer;\r\n  let controls;\r\n  let geometry;\r\n\r\n  let earthMaterial;\r\n  let earth;\r\n\r\n  let heatmapMaterial;\r\n  let heatmap;\r\n\r\n  let light;\r\n  let glowMaterial;\r\n  let outerGlow;\r\n\r\n  let controlsRef = useRef()\r\n  let heatmapRef = useRef()\r\n\r\n  const loadHeatmap = (mapURI) => {\r\n    heatmapRef.current.map = loader.load(mapURI);\r\n  };\r\n\r\n  const data = [\r\n    { x: 0, y: 8 },\r\n    { x: 1, y: 5 },\r\n    { x: 2, y: 4 },\r\n    { x: 3, y: 9 },\r\n    { x: 4, y: 1 },\r\n    { x: 5, y: 7 },\r\n    { x: 6, y: 6 },\r\n    { x: 7, y: 3 },\r\n    { x: 8, y: 2 },\r\n    { x: 9, y: 0 }\r\n  ];\r\n\r\n  const init = () => {\r\n    //Initializes Scene, Camera, and Controls\r\n    scene = new Scene();\r\n    scene.background = new Color(0x94bdff);\r\n\r\n    camera = new PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n\r\n    camera.position.z = 10;\r\n    camera.position.y = 5;\r\n\r\n    renderer = new WebGLRenderer({\r\n      canvas: canvasRef.current,\r\n      antialias: true,\r\n    });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.dampingFactor = 0.5;\r\n    controls.enablePan = false;\r\n    controls.enableDamping = true;\r\n    controls.enableKeys = false;\r\n    controls.minDistance = 6;\r\n    controls.maxDistance = 14;\r\n    controlsRef.current = controls\r\n  };\r\n\r\n  const buildGlobe = () => {\r\n    geometry = new SphereGeometry(5, 80, 80);\r\n    earthMaterial = new MeshStandardMaterial({\r\n      bumpMap: loader.load(\"https://viewmeridian.com/api/data/bump\"),\r\n      bumpScale: 0.15,\r\n    });\r\n    earthMaterial.map = loader.load(\"https://viewmeridian.com/api/data/map\");\r\n    earth = new Mesh(geometry, earthMaterial);\r\n    earth.position.x = 0;\r\n    earth.position.y = 0;\r\n    earth.position.z = 0;\r\n    scene.add(earth);\r\n  };\r\n\r\n  const buildHeatmap = () => {\r\n    heatmapMaterial = earthMaterial.clone();\r\n    heatmapMaterial.transparent = true;\r\n    heatmapRef.current = heatmapMaterial;\r\n\r\n    heatmap = new Mesh(geometry, heatmapMaterial);\r\n    heatmap.position.x = 0;\r\n    heatmap.position.y = 0;\r\n    heatmap.position.z = 0;\r\n    scene.add(heatmap);\r\n\r\n    light = new PointLight(0xffffff, 1);\r\n    light.position.set(-5, 5, 20);\r\n    scene.add(camera);\r\n    camera.add(light);\r\n  };\r\n\r\n  const aura = () => {\r\n    glowMaterial = new ShaderMaterial({\r\n      uniforms: {\r\n        c: {\r\n          type: \"f\",\r\n          value: 0.3,\r\n        },\r\n        p: {\r\n          type: \"f\",\r\n          value: 2,\r\n        },\r\n        glowColor: {\r\n          type: \"c\",\r\n          value: new Color(0xffffff),\r\n        },\r\n        viewVector: {\r\n          type: \"v3\",\r\n          value: camera.position,\r\n        },\r\n      },\r\n      vertexShader: vsScript,\r\n      fragmentShader: fsScript,\r\n      side: BackSide,\r\n      blending: AdditiveBlending,\r\n      transparent: true,\r\n    });\r\n\r\n    outerGlow = new Mesh(geometry.clone(), glowMaterial.clone());\r\n    outerGlow.position.x = 0;\r\n    outerGlow.position.y = 0;\r\n    outerGlow.position.z = 0;\r\n    outerGlow.scale.multiplyScalar(1.2);\r\n    scene.add(outerGlow);\r\n  };\r\n\r\n  const animate = () => {\r\n    requestAnimationFrame(animate);\r\n\r\n    controls.update();\r\n\r\n    outerGlow.material.uniforms.viewVector.value = new Vector3().subVectors(\r\n      camera.position,\r\n      outerGlow.position\r\n    );\r\n\r\n    renderer.render(scene, camera);\r\n  };\r\n\r\n  const handleResize = () => {\r\n    let canvas = canvasRef.current;\r\n    let width = window.innerWidth;\r\n    let height = window.innerHeight;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n\r\n    renderer.setSize(width, height);\r\n  };\r\n\r\n  const [points, setPoints] = useState([]);\r\n\r\n  useEffect(() => {\r\n    init();\r\n    buildGlobe();\r\n    buildHeatmap();\r\n    aura();\r\n\r\n    controls.update();\r\n    animate();\r\n\r\n    controls.autoRotate = true;\r\n\r\n    axios.get(`https://viewmeridian.com/api/data/stats/${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`)\r\n      .then((res) => {\r\n        setStats(res.data);\r\n      });\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // document.querySelector(\"#rotate\").addEventListener(\"click\", toggleRotation)\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadHeatmap(`https://viewmeridian.com/api/data/heatmap/${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`)\r\n    axios.get(`https://viewmeridian.com/api/data/stats/${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`)\r\n      .then((res) => {\r\n        setStats(res.data);\r\n        console.log(res.data);\r\n      });\r\n\r\n  }, [date]);\r\n\r\n  useEffect(() => {\r\n    controlsRef.current.autoRotate = rotate\r\n  }, [rotate]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef}></canvas>\r\n      <div className=\"controls\">\r\n        <label htmlFor=\"rotate\">Auto Rotate:</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"rotate\"\r\n          id=\"rotate\"\r\n          checked={rotate}\r\n          onChange={() => setRotate(!rotate)}\r\n        />\r\n      </div>\r\n      <div className=\"left-ctr\">\r\n        <div className=\"info-ctr\">\r\n          <div className=\"logo-ctr\">\r\n            <img src={meridianLogo} alt=\"Meridian Logo\" />\r\n          </div>\r\n          <div className=\"info\">\r\n            <h1>Optimum Interpolation Sea Surface Temperatures</h1>\r\n            <div className=\"date-select\">\r\n              <div className=\"select\">\r\n                <label htmlFor=\"date\">Date</label>\r\n                <DatePicker\r\n                  selected={date}\r\n                  id=\"date_picker\"\r\n                  onChange={(date) => setDate(date)}\r\n                  minDate={new Date(2020, 0, 1)}\r\n                  maxDate={new Date(2020, 0, 31)}\r\n                  customInput={<DateButton />}\r\n                />\r\n              </div>\r\n              <div className=\"playback\"></div>\r\n            </div>\r\n            <label htmlFor=\"\">Data</label>\r\n            <h2>Max Temp: </h2>\r\n            <p>{stats.max}°C</p>\r\n            <br />\r\n            <h2>Min Temp: </h2>\r\n            <p>{stats.min}°C</p>\r\n            <br />\r\n            <h2>Mean SST: </h2>\r\n            <p>{stats.avg}°C</p>\r\n            <br />\r\n            <h2>Std Dev: </h2>\r\n            <p>{stats.std}°C</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"full-stats\">\r\n\r\n      </div>\r\n      <div className=\"card\">\r\n        <h2>See expanded dataset &gt;</h2>\r\n        <FlexibleWidthXYPlot height={120} className=\"graph\" style={{fontSize:\"40px\"}}>\r\n          <XAxis />\r\n          <YAxis />\r\n          <VerticalGridLines />\r\n          <HorizontalGridLines />\r\n          <LineGraph data={data} className=\"line-series\" />\r\n        </FlexibleWidthXYPlot>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { View } from './View';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/view\" component={View}/>\r\n          <Redirect to=\"/view\"/>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './pages/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}